node {
  name: "input_placeholder"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
        dim {
          size: 4
        }
      }
    }
  }
}
node {
  name: "cudnn_lstm/state_placeholder"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 2
        }
        dim {
          size: -1
        }
        dim {
          size: 16
        }
      }
    }
  }
}
node {
  name: "cudnn_lstm/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "cudnn_lstm/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "cudnn_lstm/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "cudnn_lstm/strided_slice"
  op: "StridedSlice"
  input: "cudnn_lstm/state_placeholder"
  input: "cudnn_lstm/strided_slice/stack"
  input: "cudnn_lstm/strided_slice/stack_1"
  input: "cudnn_lstm/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 3
    }
  }
}
node {
  name: "cudnn_lstm/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "cudnn_lstm/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "cudnn_lstm/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "cudnn_lstm/strided_slice_1"
  op: "StridedSlice"
  input: "cudnn_lstm/state_placeholder"
  input: "cudnn_lstm/strided_slice_1/stack"
  input: "cudnn_lstm/strided_slice_1/stack_1"
  input: "cudnn_lstm/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 3
    }
  }
}
node {
  name: "cudnn_lstm/rnn/Shape"
  op: "Shape"
  input: "input_placeholder"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cudnn_lstm/rnn/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cudnn_lstm/rnn/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "cudnn_lstm/rnn/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cudnn_lstm/rnn/strided_slice"
  op: "StridedSlice"
  input: "cudnn_lstm/rnn/Shape"
  input: "cudnn_lstm/rnn/strided_slice/stack"
  input: "cudnn_lstm/rnn/strided_slice/stack_1"
  input: "cudnn_lstm/rnn/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cudnn_lstm/rnn/Shape_1"
  op: "Shape"
  input: "input_placeholder"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cudnn_lstm/rnn/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cudnn_lstm/rnn/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cudnn_lstm/rnn/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cudnn_lstm/rnn/strided_slice_1"
  op: "StridedSlice"
  input: "cudnn_lstm/rnn/Shape_1"
  input: "cudnn_lstm/rnn/strided_slice_1/stack"
  input: "cudnn_lstm/rnn/strided_slice_1/stack_1"
  input: "cudnn_lstm/rnn/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cudnn_lstm/rnn/Shape_2"
  op: "Shape"
  input: "input_placeholder"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cudnn_lstm/rnn/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cudnn_lstm/rnn/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "cudnn_lstm/rnn/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cudnn_lstm/rnn/strided_slice_2"
  op: "StridedSlice"
  input: "cudnn_lstm/rnn/Shape_2"
  input: "cudnn_lstm/rnn/strided_slice_2/stack"
  input: "cudnn_lstm/rnn/strided_slice_2/stack_1"
  input: "cudnn_lstm/rnn/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cudnn_lstm/rnn/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cudnn_lstm/rnn/ExpandDims"
  op: "ExpandDims"
  input: "cudnn_lstm/rnn/strided_slice_2"
  input: "cudnn_lstm/rnn/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cudnn_lstm/rnn/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 16
      }
    }
  }
}
node {
  name: "cudnn_lstm/rnn/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cudnn_lstm/rnn/concat"
  op: "ConcatV2"
  input: "cudnn_lstm/rnn/ExpandDims"
  input: "cudnn_lstm/rnn/Const"
  input: "cudnn_lstm/rnn/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cudnn_lstm/rnn/zeros/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "cudnn_lstm/rnn/zeros"
  op: "Fill"
  input: "cudnn_lstm/rnn/concat"
  input: "cudnn_lstm/rnn/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cudnn_lstm/rnn/time"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cudnn_lstm/rnn/TensorArray"
  op: "TensorArrayV3"
  input: "cudnn_lstm/rnn/strided_slice_1"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "cudnn_lstm/rnn/dynamic_rnn/output_0"
    }
  }
}
node {
  name: "cudnn_lstm/rnn/TensorArray_1"
  op: "TensorArrayV3"
  input: "cudnn_lstm/rnn/strided_slice_1"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 4
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "cudnn_lstm/rnn/dynamic_rnn/input_0"
    }
  }
}
node {
  name: "cudnn_lstm/rnn/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "input_placeholder"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cudnn_lstm/rnn/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cudnn_lstm/rnn/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cudnn_lstm/rnn/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cudnn_lstm/rnn/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "cudnn_lstm/rnn/TensorArrayUnstack/Shape"
  input: "cudnn_lstm/rnn/TensorArrayUnstack/strided_slice/stack"
  input: "cudnn_lstm/rnn/TensorArrayUnstack/strided_slice/stack_1"
  input: "cudnn_lstm/rnn/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cudnn_lstm/rnn/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cudnn_lstm/rnn/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cudnn_lstm/rnn/TensorArrayUnstack/range"
  op: "Range"
  input: "cudnn_lstm/rnn/TensorArrayUnstack/range/start"
  input: "cudnn_lstm/rnn/TensorArrayUnstack/strided_slice"
  input: "cudnn_lstm/rnn/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cudnn_lstm/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "cudnn_lstm/rnn/TensorArray_1"
  input: "cudnn_lstm/rnn/TensorArrayUnstack/range"
  input: "input_placeholder"
  input: "cudnn_lstm/rnn/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@input_placeholder"
      }
    }
  }
}
node {
  name: "cudnn_lstm/rnn/Maximum/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cudnn_lstm/rnn/Maximum"
  op: "Maximum"
  input: "cudnn_lstm/rnn/Maximum/x"
  input: "cudnn_lstm/rnn/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cudnn_lstm/rnn/Minimum"
  op: "Minimum"
  input: "cudnn_lstm/rnn/strided_slice_1"
  input: "cudnn_lstm/rnn/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cudnn_lstm/rnn/while/iteration_counter"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cudnn_lstm/rnn/while/Enter"
  op: "Enter"
  input: "cudnn_lstm/rnn/while/iteration_counter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cudnn_lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "cudnn_lstm/rnn/while/Enter_1"
  op: "Enter"
  input: "cudnn_lstm/rnn/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cudnn_lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "cudnn_lstm/rnn/while/Enter_2"
  op: "Enter"
  input: "cudnn_lstm/rnn/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cudnn_lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "cudnn_lstm/rnn/while/Enter_3"
  op: "Enter"
  input: "cudnn_lstm/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cudnn_lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "cudnn_lstm/rnn/while/Enter_4"
  op: "Enter"
  input: "cudnn_lstm/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cudnn_lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "cudnn_lstm/rnn/while/Merge"
  op: "Merge"
  input: "cudnn_lstm/rnn/while/Enter"
  input: "cudnn_lstm/rnn/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cudnn_lstm/rnn/while/Merge_1"
  op: "Merge"
  input: "cudnn_lstm/rnn/while/Enter_1"
  input: "cudnn_lstm/rnn/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cudnn_lstm/rnn/while/Merge_2"
  op: "Merge"
  input: "cudnn_lstm/rnn/while/Enter_2"
  input: "cudnn_lstm/rnn/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cudnn_lstm/rnn/while/Merge_3"
  op: "Merge"
  input: "cudnn_lstm/rnn/while/Enter_3"
  input: "cudnn_lstm/rnn/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cudnn_lstm/rnn/while/Merge_4"
  op: "Merge"
  input: "cudnn_lstm/rnn/while/Enter_4"
  input: "cudnn_lstm/rnn/while/NextIteration_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cudnn_lstm/rnn/while/Less"
  op: "Less"
  input: "cudnn_lstm/rnn/while/Merge"
  input: "cudnn_lstm/rnn/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cudnn_lstm/rnn/while/Less/Enter"
  op: "Enter"
  input: "cudnn_lstm/rnn/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cudnn_lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "cudnn_lstm/rnn/while/Less_1"
  op: "Less"
  input: "cudnn_lstm/rnn/while/Merge_1"
  input: "cudnn_lstm/rnn/while/Less_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cudnn_lstm/rnn/while/Less_1/Enter"
  op: "Enter"
  input: "cudnn_lstm/rnn/Minimum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cudnn_lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "cudnn_lstm/rnn/while/LogicalAnd"
  op: "LogicalAnd"
  input: "cudnn_lstm/rnn/while/Less"
  input: "cudnn_lstm/rnn/while/Less_1"
}
node {
  name: "cudnn_lstm/rnn/while/LoopCond"
  op: "LoopCond"
  input: "cudnn_lstm/rnn/while/LogicalAnd"
}
node {
  name: "cudnn_lstm/rnn/while/Switch"
  op: "Switch"
  input: "cudnn_lstm/rnn/while/Merge"
  input: "cudnn_lstm/rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cudnn_lstm/rnn/while/Merge"
      }
    }
  }
}
node {
  name: "cudnn_lstm/rnn/while/Switch_1"
  op: "Switch"
  input: "cudnn_lstm/rnn/while/Merge_1"
  input: "cudnn_lstm/rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cudnn_lstm/rnn/while/Merge_1"
      }
    }
  }
}
node {
  name: "cudnn_lstm/rnn/while/Switch_2"
  op: "Switch"
  input: "cudnn_lstm/rnn/while/Merge_2"
  input: "cudnn_lstm/rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cudnn_lstm/rnn/while/Merge_2"
      }
    }
  }
}
node {
  name: "cudnn_lstm/rnn/while/Switch_3"
  op: "Switch"
  input: "cudnn_lstm/rnn/while/Merge_3"
  input: "cudnn_lstm/rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cudnn_lstm/rnn/while/Merge_3"
      }
    }
  }
}
node {
  name: "cudnn_lstm/rnn/while/Switch_4"
  op: "Switch"
  input: "cudnn_lstm/rnn/while/Merge_4"
  input: "cudnn_lstm/rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cudnn_lstm/rnn/while/Merge_4"
      }
    }
  }
}
node {
  name: "cudnn_lstm/rnn/while/Identity"
  op: "Identity"
  input: "cudnn_lstm/rnn/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cudnn_lstm/rnn/while/Identity_1"
  op: "Identity"
  input: "cudnn_lstm/rnn/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cudnn_lstm/rnn/while/Identity_2"
  op: "Identity"
  input: "cudnn_lstm/rnn/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cudnn_lstm/rnn/while/Identity_3"
  op: "Identity"
  input: "cudnn_lstm/rnn/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cudnn_lstm/rnn/while/Identity_4"
  op: "Identity"
  input: "cudnn_lstm/rnn/while/Switch_4:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cudnn_lstm/rnn/while/add/y"
  op: "Const"
  input: "^cudnn_lstm/rnn/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cudnn_lstm/rnn/while/add"
  op: "Add"
  input: "cudnn_lstm/rnn/while/Identity"
  input: "cudnn_lstm/rnn/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cudnn_lstm/rnn/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "cudnn_lstm/rnn/while/TensorArrayReadV3/Enter"
  input: "cudnn_lstm/rnn/while/Identity_1"
  input: "cudnn_lstm/rnn/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cudnn_lstm/rnn/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "cudnn_lstm/rnn/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cudnn_lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "cudnn_lstm/rnn/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "cudnn_lstm/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cudnn_lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "cudnn_lstm/rnn/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cudnn_lstm/rnn/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\024\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "cudnn_lstm/rnn/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cudnn_lstm/rnn/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.26726123690605164
      }
    }
  }
}
node {
  name: "cudnn_lstm/rnn/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cudnn_lstm/rnn/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.26726123690605164
      }
    }
  }
}
node {
  name: "cudnn_lstm/rnn/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "cudnn_lstm/rnn/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cudnn_lstm/rnn/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 82
    }
  }
}
node {
  name: "cudnn_lstm/rnn/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "cudnn_lstm/rnn/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/max"
  input: "cudnn_lstm/rnn/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cudnn_lstm/rnn/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
}
node {
  name: "cudnn_lstm/rnn/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "cudnn_lstm/rnn/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  input: "cudnn_lstm/rnn/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cudnn_lstm/rnn/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
}
node {
  name: "cudnn_lstm/rnn/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform"
  op: "Add"
  input: "cudnn_lstm/rnn/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/mul"
  input: "cudnn_lstm/rnn/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cudnn_lstm/rnn/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
}
node {
  name: "cudnn_lstm/rnn/multi_rnn_cell/cell_0/lstm_cell/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cudnn_lstm/rnn/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "cudnn_lstm/rnn/multi_rnn_cell/cell_0/lstm_cell/kernel/Assign"
  op: "Assign"
  input: "cudnn_lstm/rnn/multi_rnn_cell/cell_0/lstm_cell/kernel"
  input: "cudnn_lstm/rnn/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cudnn_lstm/rnn/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "cudnn_lstm/rnn/multi_rnn_cell/cell_0/lstm_cell/kernel/read"
  op: "Identity"
  input: "cudnn_lstm/rnn/multi_rnn_cell/cell_0/lstm_cell/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cudnn_lstm/rnn/multi_rnn_cell/cell_0/lstm_cell/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cudnn_lstm/rnn/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "cudnn_lstm/rnn/multi_rnn_cell/cell_0/lstm_cell/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cudnn_lstm/rnn/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "cudnn_lstm/rnn/multi_rnn_cell/cell_0/lstm_cell/bias/Assign"
  op: "Assign"
  input: "cudnn_lstm/rnn/multi_rnn_cell/cell_0/lstm_cell/bias"
  input: "cudnn_lstm/rnn/multi_rnn_cell/cell_0/lstm_cell/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cudnn_lstm/rnn/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "cudnn_lstm/rnn/multi_rnn_cell/cell_0/lstm_cell/bias/read"
  op: "Identity"
  input: "cudnn_lstm/rnn/multi_rnn_cell/cell_0/lstm_cell/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cudnn_lstm/rnn/while/rnn/multi_rnn_cell/cell_0/lstm_cell/concat/axis"
  op: "Const"
  input: "^cudnn_lstm/rnn/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cudnn_lstm/rnn/while/rnn/multi_rnn_cell/cell_0/lstm_cell/concat"
  op: "ConcatV2"
  input: "cudnn_lstm/rnn/while/TensorArrayReadV3"
  input: "cudnn_lstm/rnn/while/Identity_4"
  input: "cudnn_lstm/rnn/while/rnn/multi_rnn_cell/cell_0/lstm_cell/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cudnn_lstm/rnn/while/rnn/multi_rnn_cell/cell_0/lstm_cell/MatMul"
  op: "MatMul"
  input: "cudnn_lstm/rnn/while/rnn/multi_rnn_cell/cell_0/lstm_cell/concat"
  input: "cudnn_lstm/rnn/while/rnn/multi_rnn_cell/cell_0/lstm_cell/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "cudnn_lstm/rnn/while/rnn/multi_rnn_cell/cell_0/lstm_cell/MatMul/Enter"
  op: "Enter"
  input: "cudnn_lstm/rnn/multi_rnn_cell/cell_0/lstm_cell/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cudnn_lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "cudnn_lstm/rnn/while/rnn/multi_rnn_cell/cell_0/lstm_cell/BiasAdd"
  op: "BiasAdd"
  input: "cudnn_lstm/rnn/while/rnn/multi_rnn_cell/cell_0/lstm_cell/MatMul"
  input: "cudnn_lstm/rnn/while/rnn/multi_rnn_cell/cell_0/lstm_cell/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "cudnn_lstm/rnn/while/rnn/multi_rnn_cell/cell_0/lstm_cell/BiasAdd/Enter"
  op: "Enter"
  input: "cudnn_lstm/rnn/multi_rnn_cell/cell_0/lstm_cell/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cudnn_lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "cudnn_lstm/rnn/while/rnn/multi_rnn_cell/cell_0/lstm_cell/Const"
  op: "Const"
  input: "^cudnn_lstm/rnn/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "cudnn_lstm/rnn/while/rnn/multi_rnn_cell/cell_0/lstm_cell/split/split_dim"
  op: "Const"
  input: "^cudnn_lstm/rnn/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cudnn_lstm/rnn/while/rnn/multi_rnn_cell/cell_0/lstm_cell/split"
  op: "Split"
  input: "cudnn_lstm/rnn/while/rnn/multi_rnn_cell/cell_0/lstm_cell/split/split_dim"
  input: "cudnn_lstm/rnn/while/rnn/multi_rnn_cell/cell_0/lstm_cell/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "cudnn_lstm/rnn/while/rnn/multi_rnn_cell/cell_0/lstm_cell/add/y"
  op: "Const"
  input: "^cudnn_lstm/rnn/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "cudnn_lstm/rnn/while/rnn/multi_rnn_cell/cell_0/lstm_cell/add"
  op: "Add"
  input: "cudnn_lstm/rnn/while/rnn/multi_rnn_cell/cell_0/lstm_cell/split:2"
  input: "cudnn_lstm/rnn/while/rnn/multi_rnn_cell/cell_0/lstm_cell/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cudnn_lstm/rnn/while/rnn/multi_rnn_cell/cell_0/lstm_cell/Sigmoid"
  op: "Sigmoid"
  input: "cudnn_lstm/rnn/while/rnn/multi_rnn_cell/cell_0/lstm_cell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cudnn_lstm/rnn/while/rnn/multi_rnn_cell/cell_0/lstm_cell/mul"
  op: "Mul"
  input: "cudnn_lstm/rnn/while/rnn/multi_rnn_cell/cell_0/lstm_cell/Sigmoid"
  input: "cudnn_lstm/rnn/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cudnn_lstm/rnn/while/rnn/multi_rnn_cell/cell_0/lstm_cell/Sigmoid_1"
  op: "Sigmoid"
  input: "cudnn_lstm/rnn/while/rnn/multi_rnn_cell/cell_0/lstm_cell/split"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cudnn_lstm/rnn/while/rnn/multi_rnn_cell/cell_0/lstm_cell/Tanh"
  op: "Tanh"
  input: "cudnn_lstm/rnn/while/rnn/multi_rnn_cell/cell_0/lstm_cell/split:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cudnn_lstm/rnn/while/rnn/multi_rnn_cell/cell_0/lstm_cell/mul_1"
  op: "Mul"
  input: "cudnn_lstm/rnn/while/rnn/multi_rnn_cell/cell_0/lstm_cell/Sigmoid_1"
  input: "cudnn_lstm/rnn/while/rnn/multi_rnn_cell/cell_0/lstm_cell/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cudnn_lstm/rnn/while/rnn/multi_rnn_cell/cell_0/lstm_cell/add_1"
  op: "Add"
  input: "cudnn_lstm/rnn/while/rnn/multi_rnn_cell/cell_0/lstm_cell/mul"
  input: "cudnn_lstm/rnn/while/rnn/multi_rnn_cell/cell_0/lstm_cell/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cudnn_lstm/rnn/while/rnn/multi_rnn_cell/cell_0/lstm_cell/Sigmoid_2"
  op: "Sigmoid"
  input: "cudnn_lstm/rnn/while/rnn/multi_rnn_cell/cell_0/lstm_cell/split:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cudnn_lstm/rnn/while/rnn/multi_rnn_cell/cell_0/lstm_cell/Tanh_1"
  op: "Tanh"
  input: "cudnn_lstm/rnn/while/rnn/multi_rnn_cell/cell_0/lstm_cell/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cudnn_lstm/rnn/while/rnn/multi_rnn_cell/cell_0/lstm_cell/mul_2"
  op: "Mul"
  input: "cudnn_lstm/rnn/while/rnn/multi_rnn_cell/cell_0/lstm_cell/Sigmoid_2"
  input: "cudnn_lstm/rnn/while/rnn/multi_rnn_cell/cell_0/lstm_cell/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cudnn_lstm/rnn/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "cudnn_lstm/rnn/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "cudnn_lstm/rnn/while/Identity_1"
  input: "cudnn_lstm/rnn/while/rnn/multi_rnn_cell/cell_0/lstm_cell/mul_2"
  input: "cudnn_lstm/rnn/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cudnn_lstm/rnn/while/rnn/multi_rnn_cell/cell_0/lstm_cell/mul_2"
      }
    }
  }
}
node {
  name: "cudnn_lstm/rnn/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "cudnn_lstm/rnn/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cudnn_lstm/rnn/while/rnn/multi_rnn_cell/cell_0/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "cudnn_lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "cudnn_lstm/rnn/while/add_1/y"
  op: "Const"
  input: "^cudnn_lstm/rnn/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cudnn_lstm/rnn/while/add_1"
  op: "Add"
  input: "cudnn_lstm/rnn/while/Identity_1"
  input: "cudnn_lstm/rnn/while/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cudnn_lstm/rnn/while/NextIteration"
  op: "NextIteration"
  input: "cudnn_lstm/rnn/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cudnn_lstm/rnn/while/NextIteration_1"
  op: "NextIteration"
  input: "cudnn_lstm/rnn/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cudnn_lstm/rnn/while/NextIteration_2"
  op: "NextIteration"
  input: "cudnn_lstm/rnn/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cudnn_lstm/rnn/while/NextIteration_3"
  op: "NextIteration"
  input: "cudnn_lstm/rnn/while/rnn/multi_rnn_cell/cell_0/lstm_cell/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cudnn_lstm/rnn/while/NextIteration_4"
  op: "NextIteration"
  input: "cudnn_lstm/rnn/while/rnn/multi_rnn_cell/cell_0/lstm_cell/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cudnn_lstm/rnn/while/Exit"
  op: "Exit"
  input: "cudnn_lstm/rnn/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cudnn_lstm/rnn/while/Exit_1"
  op: "Exit"
  input: "cudnn_lstm/rnn/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cudnn_lstm/rnn/while/Exit_2"
  op: "Exit"
  input: "cudnn_lstm/rnn/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cudnn_lstm/rnn/while/Exit_3"
  op: "Exit"
  input: "cudnn_lstm/rnn/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cudnn_lstm/rnn/while/Exit_4"
  op: "Exit"
  input: "cudnn_lstm/rnn/while/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cudnn_lstm/rnn/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "cudnn_lstm/rnn/TensorArray"
  input: "cudnn_lstm/rnn/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cudnn_lstm/rnn/TensorArray"
      }
    }
  }
}
node {
  name: "cudnn_lstm/rnn/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cudnn_lstm/rnn/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cudnn_lstm/rnn/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cudnn_lstm/rnn/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cudnn_lstm/rnn/TensorArrayStack/range"
  op: "Range"
  input: "cudnn_lstm/rnn/TensorArrayStack/range/start"
  input: "cudnn_lstm/rnn/TensorArrayStack/TensorArraySizeV3"
  input: "cudnn_lstm/rnn/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cudnn_lstm/rnn/TensorArray"
      }
    }
  }
}
node {
  name: "cudnn_lstm/rnn/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "cudnn_lstm/rnn/TensorArray"
  input: "cudnn_lstm/rnn/TensorArrayStack/range"
  input: "cudnn_lstm/rnn/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cudnn_lstm/rnn/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 16
        }
      }
    }
  }
}
node {
  name: "cudnn_lstm/rnn/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 16
      }
    }
  }
}
node {
  name: "cudnn_lstm/stack"
  op: "Pack"
  input: "cudnn_lstm/rnn/while/Exit_3"
  input: "cudnn_lstm/rnn/while/Exit_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "cudnn_lstm/output_state"
  op: "Pack"
  input: "cudnn_lstm/stack"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "logits/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@logits/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\020\000\000\000\004\000\000\000"
      }
    }
  }
}
node {
  name: "logits/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@logits/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.547722578048706
      }
    }
  }
}
node {
  name: "logits/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@logits/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.547722578048706
      }
    }
  }
}
node {
  name: "logits/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "logits/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@logits/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 138
    }
  }
}
node {
  name: "logits/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "logits/kernel/Initializer/random_uniform/max"
  input: "logits/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@logits/kernel"
      }
    }
  }
}
node {
  name: "logits/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "logits/kernel/Initializer/random_uniform/RandomUniform"
  input: "logits/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@logits/kernel"
      }
    }
  }
}
node {
  name: "logits/kernel/Initializer/random_uniform"
  op: "Add"
  input: "logits/kernel/Initializer/random_uniform/mul"
  input: "logits/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@logits/kernel"
      }
    }
  }
}
node {
  name: "logits/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@logits/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
        dim {
          size: 4
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "logits/kernel/Assign"
  op: "Assign"
  input: "logits/kernel"
  input: "logits/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@logits/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "logits/kernel/read"
  op: "Identity"
  input: "logits/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@logits/kernel"
      }
    }
  }
}
node {
  name: "logits/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@logits/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 4
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "logits/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@logits/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "logits/bias/Assign"
  op: "Assign"
  input: "logits/bias"
  input: "logits/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@logits/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "logits/bias/read"
  op: "Identity"
  input: "logits/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@logits/bias"
      }
    }
  }
}
node {
  name: "logits/Tensordot/Shape"
  op: "Shape"
  input: "cudnn_lstm/rnn/TensorArrayStack/TensorArrayGatherV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "logits/Tensordot/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "logits/Tensordot/axes"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "logits/Tensordot/GreaterEqual/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "logits/Tensordot/GreaterEqual"
  op: "GreaterEqual"
  input: "logits/Tensordot/axes"
  input: "logits/Tensordot/GreaterEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "logits/Tensordot/Cast"
  op: "Cast"
  input: "logits/Tensordot/GreaterEqual"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "logits/Tensordot/mul"
  op: "Mul"
  input: "logits/Tensordot/Cast"
  input: "logits/Tensordot/axes"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "logits/Tensordot/Less/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "logits/Tensordot/Less"
  op: "Less"
  input: "logits/Tensordot/axes"
  input: "logits/Tensordot/Less/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "logits/Tensordot/Cast_1"
  op: "Cast"
  input: "logits/Tensordot/Less"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "logits/Tensordot/add"
  op: "Add"
  input: "logits/Tensordot/axes"
  input: "logits/Tensordot/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "logits/Tensordot/mul_1"
  op: "Mul"
  input: "logits/Tensordot/Cast_1"
  input: "logits/Tensordot/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "logits/Tensordot/add_1"
  op: "Add"
  input: "logits/Tensordot/mul"
  input: "logits/Tensordot/mul_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "logits/Tensordot/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "logits/Tensordot/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "logits/Tensordot/range"
  op: "Range"
  input: "logits/Tensordot/range/start"
  input: "logits/Tensordot/Rank"
  input: "logits/Tensordot/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "logits/Tensordot/ListDiff"
  op: "ListDiff"
  input: "logits/Tensordot/range"
  input: "logits/Tensordot/add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "out_idx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "logits/Tensordot/GatherV2/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "logits/Tensordot/GatherV2"
  op: "GatherV2"
  input: "logits/Tensordot/Shape"
  input: "logits/Tensordot/ListDiff"
  input: "logits/Tensordot/GatherV2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "logits/Tensordot/GatherV2_1/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "logits/Tensordot/GatherV2_1"
  op: "GatherV2"
  input: "logits/Tensordot/Shape"
  input: "logits/Tensordot/add_1"
  input: "logits/Tensordot/GatherV2_1/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "logits/Tensordot/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "logits/Tensordot/Prod"
  op: "Prod"
  input: "logits/Tensordot/GatherV2"
  input: "logits/Tensordot/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "logits/Tensordot/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "logits/Tensordot/Prod_1"
  op: "Prod"
  input: "logits/Tensordot/GatherV2_1"
  input: "logits/Tensordot/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "logits/Tensordot/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "logits/Tensordot/concat"
  op: "ConcatV2"
  input: "logits/Tensordot/GatherV2_1"
  input: "logits/Tensordot/GatherV2"
  input: "logits/Tensordot/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "logits/Tensordot/concat_1/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "logits/Tensordot/concat_1"
  op: "ConcatV2"
  input: "logits/Tensordot/ListDiff"
  input: "logits/Tensordot/add_1"
  input: "logits/Tensordot/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "logits/Tensordot/stack"
  op: "Pack"
  input: "logits/Tensordot/Prod"
  input: "logits/Tensordot/Prod_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "logits/Tensordot/transpose"
  op: "Transpose"
  input: "cudnn_lstm/rnn/TensorArrayStack/TensorArrayGatherV3"
  input: "logits/Tensordot/concat_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "logits/Tensordot/Reshape"
  op: "Reshape"
  input: "logits/Tensordot/transpose"
  input: "logits/Tensordot/stack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "logits/Tensordot/transpose_1/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "logits/Tensordot/transpose_1"
  op: "Transpose"
  input: "logits/kernel/read"
  input: "logits/Tensordot/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "logits/Tensordot/Reshape_1/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\020\000\000\000\004\000\000\000"
      }
    }
  }
}
node {
  name: "logits/Tensordot/Reshape_1"
  op: "Reshape"
  input: "logits/Tensordot/transpose_1"
  input: "logits/Tensordot/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "logits/Tensordot/MatMul"
  op: "MatMul"
  input: "logits/Tensordot/Reshape"
  input: "logits/Tensordot/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "logits/Tensordot/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "logits/Tensordot/concat_2/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "logits/Tensordot/concat_2"
  op: "ConcatV2"
  input: "logits/Tensordot/GatherV2"
  input: "logits/Tensordot/Const_2"
  input: "logits/Tensordot/concat_2/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "logits/Tensordot"
  op: "Reshape"
  input: "logits/Tensordot/MatMul"
  input: "logits/Tensordot/concat_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "logits/BiasAdd"
  op: "BiasAdd"
  input: "logits/Tensordot"
  input: "logits/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "strided_slice"
  op: "StridedSlice"
  input: "logits/BiasAdd"
  input: "strided_slice/stack"
  input: "strided_slice/stack_1"
  input: "strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 4
    }
  }
}
node {
  name: "strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "strided_slice_1"
  op: "StridedSlice"
  input: "logits/BiasAdd"
  input: "strided_slice_1/stack"
  input: "strided_slice_1/stack_1"
  input: "strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 4
    }
  }
}
node {
  name: "Atan2"
  op: "Atan2"
  input: "strided_slice"
  input: "strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "strided_slice_2"
  op: "StridedSlice"
  input: "logits/BiasAdd"
  input: "strided_slice_2/stack"
  input: "strided_slice_2/stack_1"
  input: "strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 4
    }
  }
}
node {
  name: "strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\004\000\000\000"
      }
    }
  }
}
node {
  name: "strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "strided_slice_3"
  op: "StridedSlice"
  input: "logits/BiasAdd"
  input: "strided_slice_3/stack"
  input: "strided_slice_3/stack_1"
  input: "strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 4
    }
  }
}
node {
  name: "Atan2_1"
  op: "Atan2"
  input: "strided_slice_2"
  input: "strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "predictions"
  op: "Pack"
  input: "Atan2"
  input: "Atan2_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "axis"
    value {
      i: 2
    }
  }
}
node {
  name: "label_placeholder"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
        dim {
          size: 2
        }
      }
    }
  }
}
node {
  name: "sub"
  op: "Sub"
  input: "predictions"
  input: "label_placeholder"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Sin"
  op: "Sin"
  input: "sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Cos"
  op: "Cos"
  input: "sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Atan2_2"
  op: "Atan2"
  input: "Sin"
  input: "Cos"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Abs"
  op: "Abs"
  input: "Atan2_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "loss"
  op: "Mean"
  input: "Abs"
  input: "Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "save/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 4
          }
        }
        string_val: "cudnn_lstm/rnn/multi_rnn_cell/cell_0/lstm_cell/bias"
        string_val: "cudnn_lstm/rnn/multi_rnn_cell/cell_0/lstm_cell/kernel"
        string_val: "logits/bias"
        string_val: "logits/kernel"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 4
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/Const"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "cudnn_lstm/rnn/multi_rnn_cell/cell_0/lstm_cell/bias"
  input: "cudnn_lstm/rnn/multi_rnn_cell/cell_0/lstm_cell/kernel"
  input: "logits/bias"
  input: "logits/kernel"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/Const"
  input: "^save/SaveV2"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/Const"
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 4
          }
        }
        string_val: "cudnn_lstm/rnn/multi_rnn_cell/cell_0/lstm_cell/bias"
        string_val: "cudnn_lstm/rnn/multi_rnn_cell/cell_0/lstm_cell/kernel"
        string_val: "logits/bias"
        string_val: "logits/kernel"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 4
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign"
  op: "Assign"
  input: "cudnn_lstm/rnn/multi_rnn_cell/cell_0/lstm_cell/bias"
  input: "save/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cudnn_lstm/rnn/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_1"
  op: "Assign"
  input: "cudnn_lstm/rnn/multi_rnn_cell/cell_0/lstm_cell/kernel"
  input: "save/RestoreV2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cudnn_lstm/rnn/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_2"
  op: "Assign"
  input: "logits/bias"
  input: "save/RestoreV2:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@logits/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_3"
  op: "Assign"
  input: "logits/kernel"
  input: "save/RestoreV2:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@logits/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/Assign"
  input: "^save/Assign_1"
  input: "^save/Assign_2"
  input: "^save/Assign_3"
}
node {
  name: "Assign/value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "j}\273\272?\352:=\377\223{=(\245\020="
      }
    }
  }
}
node {
  name: "Assign"
  op: "Assign"
  input: "logits/bias"
  input: "Assign/value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@logits/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Assign_1/value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        tensor_content: "\025\024\265=\227\353\035>[\006\273\275Y\003\303\276\226\313\316<gMD>\004\\\306=\010\032\354=f\t\033\276\302\372\204?\312>\314\275\217\263\245?\t7\353\275\240\036\356>\360;\030\275`\327Y?/\355P\275\221^m=+\371\177<R\224_\275\345\262V>w_\000\274\350\3314\276=\006\363\275\330\227R\275J\233\034?\301\017\225>\036\215\204\277\337\273\">\325\331\t\276\223\315n=\251\262\336=Z\221\240\274\243~8\276~\033$\276\2036\177\276\2468\226\275\270\377\261\2754n6\276\317g\265\276-\357\002\276\210\033\326>\273_&\275\373\263\001?p\372\354\275\027F\031>M\364\215\275\236\373\250\274\036\315i\273e\242\r>\302\017\352\275_y\254= \\*\276\003\002\227>\364b\331>\027f\272>\033_\354\275\000\246o=\2465\337\275\226\212\271\275[\360V=\006\231\225<\272\362><}\367\324<"
      }
    }
  }
}
node {
  name: "Assign_1"
  op: "Assign"
  input: "cudnn_lstm/rnn/multi_rnn_cell/cell_0/lstm_cell/bias"
  input: "Assign_1/value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cudnn_lstm/rnn/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Assign_2/value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
          dim {
            size: 4
          }
        }
        tensor_content: "\237\252\004?\275r\273>;\267\365\276\205r\350\276\005j\025>\003a\"?$]\344>\300\030\270>\023\366\366>\332\320\213\276=\345\216\276\227\270\304\276h\320\361<u\304\023\274\3459%\275\2165\223\276cp\301<\366nb\275$R\002>j\240\261\276\345L\373\276\022#F\276j\006\020?\221\227=>h|r=\247u\304>\214\302\227\275]\235\t?\315\300\036>\214\344\207>\210\3732\277\334\235\323>A\253\350\276\336\377T\276\037W\216=\"\031\370\276,\375\257=3x4>\304\310\207>$\355\313\276\376\236\344\276\256t\276>\2117\212>%\004\246\276Y\223\243>\372\223\227>H\365 >\235\005\271>\240T\034?\001\224L>D\332\253=D\205}\276D\355S\276\313\361\212=S\362\301=\231\035\253\276\352\231\323>e*l\276\352\024\240>E\336\330>U\t\327>\350uR;\315\313\005\277\272{B>"
      }
    }
  }
}
node {
  name: "Assign_2"
  op: "Assign"
  input: "logits/kernel"
  input: "Assign_2/value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@logits/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Assign_3/value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
          dim {
            size: 64
          }
        }
        tensor_content: "\341\262\373\275\343,8\276\237\221\222\276\334\305\310>b$V\276v\006\307\276\nY\027\276\331l\237\275\351B\235>\307\002\212?\346 \273>\253\251U?\374\253\274>\343\010Z\275I\320.<\204\215w>\"\234Q>\367\360R\276\362\236c\276\324\006\267\276\321{\360<7\022\r>\226\3037:\211f\003\276\361q\302\276\345\233n?\371\240p\276y\275h\277\336\263\207\276k6\256>S\260\006=\250?\013\2770\310u<\024\266\300\276|\014\205>\2412H\276s\214{\274W#%>\235\223\336\275\013Z\\<\275\211\235>\345U)?E\315\355>Ve}?@\217U<W\320\366>u\201\017\2763\207\256>\020\0362\276\301\002\201\276\025\222\272>!\024\203>\373t\217\275T\017\032?\3027\034>\312Hp\276\'\027\351>\250\341\002\277\200\264\224\276M\213\327>z\336\324\274x\376\336\275\2662\031<Mr\254\276\000}p\276\201\352\233\276\264C\221>\363\375b\276\357?\335>\240\233z\275u\245\332>P\276M=\237\2664\276V\261\216?t\313\322>0\237\023\277\203\354\032>\2531\027?^\021\233=\r\203\227?Z\016\212\276\271\332\003?\022\332\240>Q\321\\>\223p\302>\214\271U>\242\274Z>\271\264\226>\316F\340<Q\260A>t\252\317\275\321\225C\277\262\340\246<\240\n\251>\226\213\322\276\216\014\273\276\000\021\017\276\031\033\335>*c\273\276\363\330\346>\245\344b\276\353p\003\277\350<\313\275\366\013\016\276[\032\007=\037\354\021?\272\202\245\275\313|(?u\224\320\276\221\277-?\021\212)=\300\360\332>\337P\227\275\252\250B>F\207!\277\323\026\355\276mr\373\2762\325j\2766\366\223\275\354\246\345>\317R==\313\252\250\276\035\213\253>\317z\215\276\374)u>,\306\272>k\347\327>b\035\274<\323\030\305\275u\216\343>)\306\002\274\307\243\032\276\205\203!>U&\t?\272\374\374\276\n\222(\2768\023\034\277\032\017\302>Y\224a\274:6\245\277R\310\311>|7\213\277\220U\351=\215:\224\276\220;\003\277?b\004\277\2744\323\275\344.\255\275\270\360\215\275\252J\274\276\337\370\223\276\025\346\024\277\003\271\231=\336\312->\3364\003\276R\017\020\276\263\013\322\276z\036\317=\235\366\355\276~\264\247>\330^G?\275*\323\2766\250X\275\373G\226\276\371\335\255>\202\035\372>O\364\312\276\300\263\222>g\240\364\275\356x\006\276\014\372\034>\013\321\276>\3503\327=\374p2=_\020F\275\342G;>2\332\010\277\366\354\374=\031\207i>\321\356\344=\177\276\016?t\222\331>\337\t\216\275\243a\203>\264\345\277\276\023\016\243\275\335\230\333\275H\337\037?\240b\213>\250\\\n>\357\010\007?\351\262\233>\270\0163>^\324\372>\233L\321>d]M\275K\244\004?\321\250)?\255\353{\276\001z&>t\346\014>^\247\236=*\203\201>\305\006\270>\231\307\002\276y-\320=\262\002\373\276\372\016\217>L$%\277B\030\312\276\004\007\307>z\2114<\305\217\226>E\334\265\275\375\025!<\"\231\024\277\365\016\246\276\245*x>\007>E>t\314%\277ZA\013>\215T\336\276?\326g=~\306\272<P\344\371>H\224\316\273\240\310\304<x\371\305=m?\272\276\230)\241\276!\220V=\035#T\276\304\331\375\276\225\2134?\261\214\271\276x\037\014?G4\013\277cf\255>A\252\362\275m\266\244>\300[X=\266Y\001?\337\274\275>\266\230\303\276\212\014h>)C\346\275\225B\247\275\311\350\202>\353\371\200>+\324\022\275\320\314\021\277`\"Y\275j\343:>\034\310$\276\274\034\341\276\224\264O\276\232\203R>\005E\302\276\023aL=\000,\023?+5\356>h\031^\274\224\\%\276Q\273\274>\312\306\002?\255\357@\276sM\331\275\301\307\317>%\036\271=K\371\232\275\360\253\271\275/\261\223>$\305\206\274\270x#\276]N\372>=\200\253\276\240\371\244>\227D\210\276@\234}>\371,!\276\2402\323>\346\210\312\276\341O\212>Ds9\275\301\305\354<n\360\247\276\r5\217=~\n\340\276,\tD\275\336\274T>\340\234\324\276VD??\257E\276>\212\263\242>\201\030]>\024o\216>u\270X\276\021\251\032\277\222\352\244\276\234\364\354\2765\332\362>[\344\325>\227J\217>F\316\347>9\356\311>i!\017\276\367\303\362=\357T0>\377\005\337>V\355<=X\201\255\276\342\346O>\"\323\203=\275\363\270\276eA\335\275\335\273\222\276R\357\325>\365<\212>F\317\317\276\341\0200\276\026\321\257<B\304\232\276W\262d>p\301\323\274\"\206J\276\312,\003?\271\032\243=\204\245\255>\245]\267\276\200\347->\273%\305>\2549w\277\276,\017\274\335\353#>\325l\343\276\306\260j>\300\3674=\205}\317<\021,\256>\301\314}>&I\032\275En%>\206\250\372\275\257s\312\276ir\033>h\0303>G\363\311=\334\250\275\276\235\te>E\327\221< \306\220>\\\215F>\036i\005=\324P\005\277p\313\317\274\201\326\267\276\257\256\351>k)\241\276\301\025\267>\312\016\227\276\362\317\252\2763\302\272=W\370\202\274\237\313\230\276\265\364\250=\310\355T>]d\013\276\232\266\177\275_>\351\274\020\317\253>\2572\215>\216\263h\276\343\377\371\276\003#\227>\226\036-?h\006e\276\375\201\351=\305\2357>G\344\340>\211\335\343\276\314^\202>\371W0>\231Af\276,\232b>\227\026j\276g\003\177>\'\376\221\275\202\305\315\276k\006\\\277l\004\253>\007\305\211\276\377\350\004\2778\376\n>\357\t\242>[OW<\021\022\211=&\371\250>\260\"\257\276\347\363\226=\200N\221\276LI\301\275\314q\322>*&\263\273\t\211\247\275\313,\020\276\336\362\247>H\"\300\275\031\336\336\274\3316\332>\005;=>\025\202\346<\177(\221\276\036P\204\276hH\256\276\311Uf>\214\316\301>\r\030\013\276\302nA\273A\355J\275\235\203l>\034\303\250\275\034\372\372=\303\275Z\276s\273$=Eig\276\264\376\216>\213\253\236>\311!\275>\277\373\304\274\326\302O>\216\017\232>\230\237^>\017\325\324=\253\017\231\275\242\007\341\2757\340\026=E\352\353\276\345\t\252>Y\223\031\276\364\036\030=K\355\032\276\216\256\207\276\036\203\350=z\314_>\277\366\230>\356\210\255>z\274\233>.\033k=\211\321\232>\340\201\200\276\335=6>Ld\305\276\247l\216>\347\t\263\276\326\240E\276\351TZ>\242!R>\034-\201>\307\314\277>\334\243\002\277\004\237\321\276pJ\321\274\273\036\265<\226h@>P\3029\275u\253\227>V\345\037\276{IC\276\255\017\223>\006\213\237>\327\210\202>\214\267\205\276\361V\021\276\225,@=\332\234\333\276\037\276\017?\272j&\276\273f\351\275\260\344\003> \243\223\276\374Z\224\275\352f\003?V\375\213>\3050@>o\304*>7R\213\275?\\\024?B\301\225>\251k\241>\374\031\002<i\006\344>\014l\024\277\370\240\261\276(Fg>kg\244\274\2429\304=\210\362\207>\370F\256>\001\3072\276*|n>\006\306\022\276p\017\230> \037H>`\366\202=uUI>\243M\000\276\031\224\314=\365\t\206\275\033\232\272>/\344\214\276\305M\317\276\246\207\256>[\013\304\276Y\351\314=\314\235\007\277g\366&\277*t\216\276r\0036\276,\3702>\306\252\210=\343\232}> \263\351>\260\2062\276\004\312\244\275\231\327\034\276 \366\326>q\216\277>S\243\241>\206Bs=\224\237O>\027\005H;Sb\313>\361\014#>\230\261\225>\342\277J\276\300\307\203=\374qj>o,g=\251\336\357\275\201\245\263<CV\253>bp\302\276\003%\322\275N\211\223>\204\317j>\211Ht\276\007?*>\365\3238>\260\245\267\274\213\236\217=NI\240\276sS\025>\335\004\321\276hq\263>\223`{>\271Wt>\231\360\'\277\375\250\301>\010OA\276\027\322 \276=EY>\315\343\013>|\250\263>\001}\360=b\333\242\275\365\321\254\276B8\230\276\r$\217>L*\350\276\372a\336>\320\'\030\275.\266@>\255\335\010\276 \232\303>?\361\324>YD\264\276\227\372\036>\375\253\301>\327\005\005\277-\317\212>\210?\307\276\234\324\">O\001\320<\200:\367=\270f(>Y\315\234>\225\022\207\276\374\252c\276\362\320\210>\322\347G?\317\272\220>v\307 >\231\370\256\275\037\006p\276\205\220\315\276-\026\334\276\335\"\353>\3001j>V(\017\277,\200\222=$4\307\276\236\260\305\275\364n\205\276\035II\276\253i\233\275\230\305\265\276\016Y\231>$O-?f\221$=\005Z\340\276\335\2209\275I^F\276b\034\361\276\036M\323\275\247\000\311\275\316x\374\276.J\374\276\261\324\022\276\257\312\300\276\350\2474?\276\220\200=\230Ug=\224=\023\276@J.?O\202\002=\322\260\211\275\202\025\374\276hI@?\362\337\323\276:\344\317>/D\032?\373\302\206>^\235\251\276\224\310\332>RQ\"\276\242\010\034>\377+\215\276\310\254\275\275\363\002\250>\334\2401\275\237\"\030\276c\003\023=\320k\364>\207\r\254=H/\031\276~\r\327>\036\333\343=\260\003\036?\312C#>\357\304p>\\\206\000\277;\210_=\3135\014\276\234\013B?\362\026\031>\206R_>\365u\\\276\356\351s\276\224@\264>\006c\311\276_\377(\276\367\022;>\3213<\275\2326\354\276\274\341*\276^5\220>\365\300+\275<\337%>x\264D\2764\035>\276\341t\262\276\344\353\234\276m\351/>\356\230\303\276U}\001=F\272\037?KhV>\0013\355>\236\352\265\276\036_\276\276\240\'\032\277\265/L>\353\305#>\212\323\211\276V4&\276p\304q>\362<\341\275\005G\235>\231\302\001?\334\227\200\276\224\300\332=jk\375\275\372\266-\276\267Gu\275\201 \204>v@\234=\001c\'\277\367\334\250\276\275a\354\276~&2\276{3\r?\202\365\340\276\207\307\271\276\265\376n\276\307Pl>\002\322X>\351\264\201>\3716\354>d\036\210\275\377>h=a\007>\275b\264\031?@\331\005>\300s\347\276\344\022\210\275\312ov<p\006\357>\017:d\276\217\305\315>\000\237\211=]\245\034?i|%\276\\\366Y\276pP\232\276(}M\276\232\246\265>\037\226\333\275o\215\312=\260E\203=_\237p\276\243\021\371\276\rp\346>Ap\007\276\351\240 >\031\325\225>\006\310\305<\267T\232>\302C\311>\250\321\312=\037\373\264\274\233S\224\276\nk\036\276\261\364\335=\306>G>M<L\276\212S\007<\026\365u\276;\220o\2768\311\337>\370\303!>A\307\260>\203\325>\275.\342?>A%\233=\360\243I>\274B\332\276\352\032 >|\243\224\275vc4\276\201\351\225\276]\341\333>0\3404<\334R\251\276$\231 >\242\247M=\324\243\031>\202\\\211>\005\207\215\2762rt>\\\r\300\276\316\374\314>}Cq>\374\321\227\276\353\226\211>\332H\201=\000\230\023\276M\205\275\274kg\223\274h2\306\274(\312\014\276j\201\271\275\316\032\376=\035\330\225\276Ed\263<\374\314\231>1S\315=\336\010O=\0176\367=g\337\321=\204V/>\333a\244<i\340\223>tj{<MR\350\275\007\221}>A\2042=\0046\177=\312\200\031\276N\362\217\276\224\351\344\276\034\317@>\306\247\255>H\n\254>\277\234->V\023\350\275\252\003i\276M\317M\276\215l/\276\217\006\203>\253^\365\275\215g\313>\202\324\376<~B\332\276\265\322\261\276\343SC>bE\371>\232f\202<=U\223>pBe\276\352\\\313\276BAc\276\327X@\276\241\340\032\276\2306\261;J`2\276|q\222\276\246\226_\276\332\030\302>\247\325\222<\244?\206\276v\226\357:\016\344\225\276\375P&\275\276_K\276\264\251b>B\210:\277\203\354\375\275sX\316\276C=\244>\002n\273>\360\036\267\276a\253\332\275L\261\242>\314\366\025?\023\336\220\276\206\234\200\275\212\352V=\t\\\223>kt8\276\001]\217\275\247M\272>qn\016\275\3557\024\275\002a\022\277G\250\342\276\257\314\212;$\335\245>\013d\215\276\333M\226\275\300\301\370=\247\237\270>\315\361\325>q\027\032\276h@\203>s\211\002>6\001D>\376\324\363\275\223\204\364\275\323K\314>\352\371\306\276\202\351\204\276\213\302|\275{\320\210>\262\353\014=\257\'\222=\244\306\032>\222\332U\277\275<\346>\324\255\314\276\322N\336\276zmx\276\013\362\343=C\241\006\276\267\261\330\2762c\314\276:c\225\276\211UE=\373\202r>:\236_>\300\220e\275\210\003\312\276&\360\324>5\036\376\276\316`e\276\240\006>\276\202\314\277\2763_\274\275HF!>\3610\245\276\010a\341\275\3447\256\275\254\372\253=\212[h\276%\204#>\216\254\203>v\346\002\277,U{>\345\366\241>\021\255\346\276\376\236\233=\0009S>{\237j\276(\374Q=\3616y=\314\270\022\274(bZ>\002SR=$\005m><z\273\276\304\307\033=\273.\266\276Q\215\333\276\354\207\363<\266\357\372>M\017\353\275\272\206\010>~D\334\274\226v\232\275\276\207+\276\366H\314=\316\306q\276|\\\361>3G\275>\000\233\222\276C\363@>;\353\'\276{q\260>%-\203\275U~\212>n\002\261=\347J\304=\340\354L>\304A\370\275\324p\302>#+\336\276\346I\343\276\315Jg>\374i\245\27512}\276\353\361\202<\354\216\215=\345\372\272\276\363\344\205>\316N\336>\314?\276>ys4>\330\260\301>\020\206\013;\341\304\340\276lS\t\276\340\267\342\275\363\034\241>H\000C>d\031\t?\025z!>\014:\256=\226h\335\276\366\005\275\276\243\200#\274\324\016\001>\276w\216>uN\365\276\2370\210\276\\\004\262<\367TM>\247\355\326\276\260(N\276\303?\256=\303\254\025\275\374\220|>\347\257a>S\'\220<G\256N\276\017kT>I\207\242\276\324\374\210\276`h\017>\207\233\353>\371B\211\275\372\266W\276\005\2725>\266\"0>\232Z\221>\215\314\213\276\247Y\255\275\333Q\357>\355\352\315>\302K\005\276\322\311\260>\310<\367>k\002\260>\251\t\221\275\363/\202>\201S0\276 \320\267<\266\202\243\276<J\247=S\247\204\275\330\272\262=.D\002>\225\217(\275\210\220M>]06>o\374!>y.\026\277\227\354\204\276p\035!>I\302n\276\304i\n>\3517N\276\200\303a>\256\030\336\276\216\301\306>\350\033\277=F\204,=\314\322\n\276\023\020\217;u\316\327\276\026\016\343<\2614\214>\262\350\233>\207=\307\276\2576\027<\236\215\027>rF\201>^\313x\276\371\366\232\276\n/\n\277\007\326\252=oX\220\276X\270\013\276=\037\274\276\323\300\\\276#\225\255\276|;\t\276+a\t\276M\013\217\275 \323\023?\007_3\275\001\356\371\276\247\365\360\276\000M\250>\222\230\022>n7\214<<;5>\223\241\367<\313r\032\275\346\273\327=\331S\375>\276\217D\274\230\031\223>s\205\323\275j\201\201\2745en\276,\304\373>\353$\331\275:e-\274\326\024\017>\003)z\276N`\201>\351F\262\276\025&\233\276\t\351\374\276@\213\013\276\205\322\004\2761\263\221\276E8n\276x8E;\204\035\366\276\201#\023\274\373\307\001\276\340)\212<\243s\204\275\tc\243>b\016\016>V\346\351\276\254\023\241\276\352\310\375\274\207`#\276p!\313>\350\274$\275\266\362\207>D>\006=\362\315\202=\353\210O\276\034\\\304>\375\350\213=\230\216\215\276\262\002|\276BN\002\274C\037a\276\341\024\250>\362D\344\276\243\314\034\276\336\371\204>\341P\312>\263\273\312\275\361\036\376\272U\275~>:\007\255>\3459\276\275\346\245\254>\303o\204\2764\006\227\276\227\027\324\276\353)\t\275\232zh\276\027m\327>\213q@\2767\361\325>\223p\315>\361\316\326\276\212m8\276M!\202>\336\312\244\276\375\000\220\276\207\017\031>\224\026\033=D\000B>\004-\341\274\354\037\243\276Ww\207\276\373\264\367=<\367C>\252Y\274>\303\336\000>p\0139>\332a\'> \353\307\275\356\200\232>\3469\331=\004\004\321>\234\247\256>\014\327\234>\317\214a\275\253\312\201\276\023\260|<(\352\364=\220C7\275#\234n\276\315\274v<\232\337\277>[\325[\276\235N\231>k^o>\234\207\270=H\251\031><7U>\n\'\216>\274\320\002=\242\314\256>\307F\327\276\3214\204\276\007\210\364=\347\334\272\275ki\343\275\2153\245\276\007x\222\275\225@=\276U\277\242>\253\205\006\276\2763\353>\247.0>\370\017+>\267\327\234\276P\002\200=\261\264m>rMo\276\001\331\002\276[1\335\275\342qd\276\234\375\240\275%b\000=\231:\327\274Eq\251>\221\371j>h\316M=\315\024\217>;m+=\303\020\347=\314\t{\276\326\016s\276\026\207\354\275\270\026\\>/4\027\276.\252\263\276?\234\250>\211\211\231\276-\304\305\275C\306;>v\372\310\276\374\213\300=\027\002\304\274\350\305o\276\314\\\013?\0252\314\276\274\224\030\277>D\007>\204\350Z>\365\320\016>\r3k>\203\356\246<q\366U>n\373\247>\372\2149\276kw\315\276\246J@\276iI\203\2762@\265>\320\020\255>l\342\214\276\353\327\257\276\234\367a\276\342\366\256>\254\253*\276\223\215\001\277\022\365q>\360\336\311\273[Q:>x\004\357\276\313\356\316\275kLC>\270\244\347\276\2627\341\275\241\250\217>[W\220>~lN>\254\236\242>\355\355\353>!\276\307=\342N\031\276\205\342\373\276t\223\204>R(\217>[\002\325\276\271`#>RIG>\352l\\\275Z\0103>)\260&\276;\200\220>\026\207\203\275iP/=L|\241\274d\374\225\276\327\343\344>v\037\237>&\365\324\276n\215\342\275\232\010\223=\226\344\310>Sa$>\320\036\206\276\362\374\233\276\177\365\007\276xC\250\276\023+\241>WjZ\276\n=\274>\271\246g\276\204D\220\2763\341\235=C\271k\276\000\221\227<\234\223\'=\323h\207>ZK\235\276\301\264\266>\275\314\301\276\227\305S="
      }
    }
  }
}
node {
  name: "Assign_3"
  op: "Assign"
  input: "cudnn_lstm/rnn/multi_rnn_cell/cell_0/lstm_cell/kernel"
  input: "Assign_3/value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cudnn_lstm/rnn/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
versions {
  producer: 26
}
